{"ast":null,"code":"import styled from 'styled-components';\n\n// ModalOverlay component with inferred types for `show` prop\nexport const ModalOverlay = styled.div`\n  display: ${({\n  show\n}) => show ? 'flex' : 'none'};\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100vw;\n  height: 100vh;\n  background: rgba(0, 0, 0, 0.6);\n  justify-content: center;\n  align-items: center;\n  z-index: 1000;\n`;\n\n// ModalBox component (no need to pass any props here, so no issues with types)\nexport const ModalBox = styled.div`\n  display: flex;\n  background: white;\n  border-radius: 20px;\n  width: 90%;\n  max-width: 800px;\n  height: 500px;\n  overflow: hidden;\n`;\n\n// LeftPanel component (no props, so no issues with types)\nexport const LeftPanel = styled.div`\n  flex: 1;\n  background-color: #3c098f;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  color: white;\n  font-size: 32px;\n  font-weight: bold;\n  padding: 20px;\n  text-align: center;\n`;\n\n// RightPanel component (no props, so no issues with types)\nexport const RightPanel = styled.div`\n  flex: 1;\n  padding: 40px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n`;\n\n// Input component (no issues with types here, as no props are used)\nexport const Input = styled.input`\n  width: 100%;\n  padding: 12px;\n  margin-bottom: 16px;\n  border: 1px solid #ccc;\n  border-radius: 8px;\n`;\n\n// Button component - TypeScript will now infer bgColor as optional string (or undefined)\nexport const Button = styled.button`\n  width: 100%;\n  padding: 12px;\n  background-color: ${({\n  bgColor\n}) => bgColor || '#3c098f'};\n  color: white;\n  font-weight: bold;\n  border: none;\n  border-radius: 8px;\n  cursor: pointer;\n  margin-top: 10px;\n\n  &:hover {\n    background-color: ${({\n  bgColor\n}) => bgColor === '#aaa' ? '#888' : '#2d076e'};\n  }\n`;\n\n// Title component (no issues with types)\nexport const Title = styled.h2`\n  font-size: 24px;\n  font-weight: bold;\n  margin-bottom: 20px;\n`;\n\n// GoogleButton component (no issues with types)\nexport const GoogleButton = styled.button`\n  background-color: white;\n  color: #444;\n  font-weight: 500;\n  border: 1px solid #ccc;\n  padding: 10px;\n  width: 100%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  gap: 10px;\n  cursor: pointer;\n  border-radius: 8px;\n  font-size: 1rem;\n  margin-bottom: 10px;\n  transition: background 0.3s;\n\n  img {\n    width: 20px;\n    height: 20px;\n  }\n\n  &:hover {\n    background-color: #f1f1f1;\n  }\n`;\n\n// OrSeparator component (no issues with types)\nexport const OrSeparator = styled.div`\n  text-align: center;\n  margin: 15px 0;\n  font-size: 0.9rem;\n  color: #666;\n  font-weight: 500;\n`;","map":{"version":3,"names":["styled","ModalOverlay","div","show","ModalBox","LeftPanel","RightPanel","Input","input","Button","button","bgColor","Title","h2","GoogleButton","OrSeparator"],"sources":["C:/Users/ASUS/Desktop/landingpage/src/pages/SignUp/styles.ts"],"sourcesContent":["import styled from 'styled-components';\r\n\r\n// ModalOverlay component with inferred types for `show` prop\r\nexport const ModalOverlay = styled.div<{ show: boolean }>`\r\n  display: ${({ show }) => (show ? 'flex' : 'none')};\r\n  position: fixed;\r\n  top: 0;\r\n  left: 0;\r\n  width: 100vw;\r\n  height: 100vh;\r\n  background: rgba(0, 0, 0, 0.6);\r\n  justify-content: center;\r\n  align-items: center;\r\n  z-index: 1000;\r\n`;\r\n\r\n// ModalBox component (no need to pass any props here, so no issues with types)\r\nexport const ModalBox = styled.div`\r\n  display: flex;\r\n  background: white;\r\n  border-radius: 20px;\r\n  width: 90%;\r\n  max-width: 800px;\r\n  height: 500px;\r\n  overflow: hidden;\r\n`;\r\n\r\n// LeftPanel component (no props, so no issues with types)\r\nexport const LeftPanel = styled.div`\r\n  flex: 1;\r\n  background-color: #3c098f;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  color: white;\r\n  font-size: 32px;\r\n  font-weight: bold;\r\n  padding: 20px;\r\n  text-align: center;\r\n`;\r\n\r\n// RightPanel component (no props, so no issues with types)\r\nexport const RightPanel = styled.div`\r\n  flex: 1;\r\n  padding: 40px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n`;\r\n\r\n// Input component (no issues with types here, as no props are used)\r\nexport const Input = styled.input`\r\n  width: 100%;\r\n  padding: 12px;\r\n  margin-bottom: 16px;\r\n  border: 1px solid #ccc;\r\n  border-radius: 8px;\r\n`;\r\n\r\n// Button component - TypeScript will now infer bgColor as optional string (or undefined)\r\nexport const Button = styled.button<{ bgColor?: string }>`\r\n  width: 100%;\r\n  padding: 12px;\r\n  background-color: ${({ bgColor }) => bgColor || '#3c098f'};\r\n  color: white;\r\n  font-weight: bold;\r\n  border: none;\r\n  border-radius: 8px;\r\n  cursor: pointer;\r\n  margin-top: 10px;\r\n\r\n  &:hover {\r\n    background-color: ${({ bgColor }) => (bgColor === '#aaa' ? '#888' : '#2d076e')};\r\n  }\r\n`;\r\n\r\n// Title component (no issues with types)\r\nexport const Title = styled.h2`\r\n  font-size: 24px;\r\n  font-weight: bold;\r\n  margin-bottom: 20px;\r\n`;\r\n\r\n// GoogleButton component (no issues with types)\r\nexport const GoogleButton = styled.button`\r\n  background-color: white;\r\n  color: #444;\r\n  font-weight: 500;\r\n  border: 1px solid #ccc;\r\n  padding: 10px;\r\n  width: 100%;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  gap: 10px;\r\n  cursor: pointer;\r\n  border-radius: 8px;\r\n  font-size: 1rem;\r\n  margin-bottom: 10px;\r\n  transition: background 0.3s;\r\n\r\n  img {\r\n    width: 20px;\r\n    height: 20px;\r\n  }\r\n\r\n  &:hover {\r\n    background-color: #f1f1f1;\r\n  }\r\n`;\r\n\r\n// OrSeparator component (no issues with types)\r\nexport const OrSeparator = styled.div`\r\n  text-align: center;\r\n  margin: 15px 0;\r\n  font-size: 0.9rem;\r\n  color: #666;\r\n  font-weight: 500;\r\n`;\r\n"],"mappings":"AAAA,OAAOA,MAAM,MAAM,mBAAmB;;AAEtC;AACA,OAAO,MAAMC,YAAY,GAAGD,MAAM,CAACE,GAAsB;AACzD,aAAa,CAAC;EAAEC;AAAK,CAAC,KAAMA,IAAI,GAAG,MAAM,GAAG,MAAO;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA,OAAO,MAAMC,QAAQ,GAAGJ,MAAM,CAACE,GAAG;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA,OAAO,MAAMG,SAAS,GAAGL,MAAM,CAACE,GAAG;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA,OAAO,MAAMI,UAAU,GAAGN,MAAM,CAACE,GAAG;AACpC;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA,OAAO,MAAMK,KAAK,GAAGP,MAAM,CAACQ,KAAK;AACjC;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA,OAAO,MAAMC,MAAM,GAAGT,MAAM,CAACU,MAA4B;AACzD;AACA;AACA,sBAAsB,CAAC;EAAEC;AAAQ,CAAC,KAAKA,OAAO,IAAI,SAAS;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,CAAC;EAAEA;AAAQ,CAAC,KAAMA,OAAO,KAAK,MAAM,GAAG,MAAM,GAAG,SAAU;AAClF;AACA,CAAC;;AAED;AACA,OAAO,MAAMC,KAAK,GAAGZ,MAAM,CAACa,EAAE;AAC9B;AACA;AACA;AACA,CAAC;;AAED;AACA,OAAO,MAAMC,YAAY,GAAGd,MAAM,CAACU,MAAM;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA,OAAO,MAAMK,WAAW,GAAGf,MAAM,CAACE,GAAG;AACrC;AACA;AACA;AACA;AACA;AACA,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}